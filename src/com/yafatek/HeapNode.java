package com.yafatek;import java.util.ArrayList;import java.util.NoSuchElementException;public class HeapNode<T extends Comparable<T>> {	private ArrayList<T> items = new ArrayList<>();	// shiftUp the Elements.	private void shiftUp() {		// size of the List.		int index = items.size() - 1;		while (index > 0) {			// parent Node.			int parentIndex = (index - 1) / 2;			// get the Item in the Position.			T item = items.get(index);			// Get the Parent			T parent = items.get(parentIndex);			if (item.compareTo(parent) > 0) {				//swap items.				items.set(index, parent);				items.set(parentIndex, item);				index = parentIndex;			} else break;		}	}	// insert Elements.	public void insert(T item) {		// add the Items to the List.		items.add(item);		// shift the Item based on its Value.		shiftUp();	}	// shift the Element Down.	private void shiftDown() {		int index = 0;		int leftIndex = (2 * index) + 1;		while (leftIndex < items.size()) {			int max = leftIndex, rightIndex = leftIndex + 1;			// there is not right Child.			if (rightIndex > items.size()) {				if (items.get(rightIndex).compareTo(items.get(leftIndex)) > 0) {					// switch.					T temp = items.get(index);					items.set(index, items.get(max));					items.set(max, temp);					index = max;					leftIndex = (2 * index) + 1;				}			} else break;		}	}	// delete item from the Heap.	public T delete() {		// if Heap list is Empty.		if (items.isEmpty()) throw new NoSuchElementException("Heap List is Empty!");		// if only One item		if (items.size() == 1) return items.remove(0);		// Get  the Top Element in the Tree.		T hold = items.get(0);		// Get the Last element in the Array, set it to the First position. finally remove it.		items.set(0, items.remove(items.size() - 1));		// arrange the Elements in the Array.		shiftDown();		return hold;	}	public int size() {		return items.size();	}	public boolean isEmpty() {		return items.isEmpty();	}	@Override	public String toString() {		return items.toString();	}}